@page "/cart"
@inject SWEPP.Services.OrderService OrderService
@inject SWEPP.Services.CustomerService CustomerService
@inject SWEPP.Services.KitchenSlipService KitchenSlipService
@inject NavigationManager NavigationManager
@using SWEPP.Models

<h3>Your Cart</h3>

@if (OrderService.CurrentOrder.Any())
{
    <ul>
        @foreach (var item in OrderService.CurrentOrder.ToList())
        {
            <li>
                @if (item is Pizza pizza)
                {
                    <div>
                        @pizza.Size pizza, @pizza.Crust crust, with @string.Join(", ", pizza.Toppings)
                    </div>
                }
                else
                {
                    <div>@item.Name</div>
                }
                - @item.Price.ToString("C")
                <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)">Remove</button>
            </li>
        }
    </ul>
    <h4>Total: @OrderService.CurrentOrder.Sum(item => item.Price).ToString("C")</h4>

    <div>
        <label for="order-type">Select Order Type:</label>
        <select id="order-type" @bind="selectedOrderType">
            <option value="Pickup">Pickup</option>
            <option value="Delivery">Delivery</option>
        </select>
    </div>

    @if (selectedOrderType == "Delivery")
    {
        <div>
            <label for="delivery-address">Enter Delivery Address:</label>
            <input id="delivery-address" @bind="deliveryAddress" placeholder="Enter delivery address here" />
        </div>
    }

    @if (CustomerService.LoggedInCustomer == null)
    {
        <div>
            <label for="payment-method">Choose a payment method:</label>
            <select id="payment-method" @bind="selectedPaymentMethod">
                <option value="Visa">Visa</option>
                <option value="MasterCard">MasterCard</option>
                <option value="Cash">Cash</option>
            </select>
        </div>
    }

    <button class="btn btn-success" @onclick="Checkout">Checkout</button>
    <button class="btn btn-danger" @onclick="ClearCart">Clear Cart</button>
}
else
{
    <p>Your cart is empty.</p>
}

@code {
    private string selectedOrderType = "Pickup";
    private string deliveryAddress = string.Empty;
    private string selectedPaymentMethod = "Visa";

    private void RemoveItem(MenuItem item)
    {
        OrderService.RemoveFromOrder(item);
        StateHasChanged();
    }

    private void ClearCart()
    {
        OrderService.ClearOrder();
        StateHasChanged();
    }

    private void Checkout()
    {
        string customerName = CustomerService.LoggedInCustomer?.Name ?? "Guest";
        string paymentMethod = CustomerService.LoggedInCustomer == null ? selectedPaymentMethod : "Visa";

        var receipt = OrderService.GenerateReceipt(customerName, paymentMethod);
        receipt.OrderType = selectedOrderType;
        receipt.DeliveryAddress = selectedOrderType == "Delivery" ? deliveryAddress : "N/A";

        OrderService.SetCurrentReceipt(receipt);
        KitchenSlipService.AddOrder(OrderService.CreateOrder(receipt));
        ClearCart();

        NavigationManager.NavigateTo("/receipt");
    }
}
